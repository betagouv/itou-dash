from pathlib import Path

from dash import Dash, html, dcc, Input, Output
from data_mgmt import *
from viz_mgmt import *

from config import DATA_PATH

app = Dash(__name__)

# how many months to keep
n_months = 12
# calculate n previous months
prev_months = get_n_prev_months(12)
# convert datetime to string for filtering candidatures_12_prev_months
prev_months_filter = [str(y)+"-"+str(x) for (x, y) in prev_months]

# init dataframe with all data

candidatures_echelle_locale_csv_path = DATA_PATH / "candidatures_echelle_locale_light.csv"
candidats_csv_path = DATA_PATH / "candidats_light.csv"

candidatures_df = load_candidatures_echelle_locale(candidatures_echelle_locale_csv_path)
candidats_df = load_candidats(candidats_csv_path)

# prepare candidate profile table
candidate_profile, table_cols = prepare_candidate_profile_per_date(candidats_df, prev_months_filter)


# filter only 12 previous months
candidatures_12_prev_months = candidatures_df[candidatures_df["date_candidature_mensuelle"].isin(prev_months_filter)]
accepted_df = candidatures_df[candidatures_df.√©tat == "Candidature accept√©e"]
declined_df = candidatures_df[candidatures_df.√©tat == "Candidature d√©clin√©e"]
notaccepted = candidatures_df[candidatures_df["√©tat"] != "Candidature accept√©e"]

# calculate groupby for candidatures
accepted_by_employer = groupby_count(candidatures_df, ['type_structure', 'date_candidature_mensuelle'], "id_anonymis√©")
accepted_by_employer = accepted_by_employer[accepted_by_employer["date_candidature_mensuelle"].isin(prev_months_filter)]
accepted_by_employer = accepted_by_employer[accepted_by_employer["type_structure"].isin(["ACI", "AI", "EI", "EITI", "ETTI"])]
accepted_by_employer.sort_values(by="date_candidature_mensuelle")


accepted_by_orienteur = groupby_count(candidatures_df, ['origine', 'date_candidature_mensuelle'], "id_anonymis√©")
accepted_by_orienteur = accepted_by_orienteur[accepted_by_orienteur["date_candidature_mensuelle"].isin(prev_months_filter)]
accepted_by_orienteur.sort_values(by="date_candidature_mensuelle")


counts_df_√©tat = groupby_count(candidatures_12_prev_months,
                          ['√©tat', 'date_candidature_mensuelle'],
                          "id_anonymis√©")
counts_df_√©tat.sort_values(by="date_candidature_mensuelle")


counts_df_origine = groupby_count(candidatures_12_prev_months,
                          ['origine', 'date_candidature_mensuelle'],
                          "id_anonymis√©")
counts_df_origine.sort_values(by="date_candidature_mensuelle")

refus_labels = list(set(notaccepted.motif_de_refus))
refus_counts = [len(notaccepted[notaccepted["motif_de_refus"] == l]) for l in refus_labels]
counts_pct_motif_refus = [round(c/sum(refus_counts)*100) for c in refus_counts]
total_refus = len(notaccepted)

# add all to init filter
depts = list(set(candidatures_df.nom_d√©partement_structure.dropna()))+["all"]
depts.sort()

employer = list(set(candidatures_df.type_structure.dropna()))+["all"]
employer.sort()

fig_counts_√©tat = multiple_bar_plot(counts_df_√©tat,
                        "date_candidature_mensuelle",
                        "count",
                        "√©tat",
                        prev_months_filter)

fig_counts_origine = multiple_bar_plot(counts_df_origine,
                        "date_candidature_mensuelle",
                        "count",
                        "origine",
                        prev_months_filter)

fig_counts_employer = multiple_bar_plot(accepted_by_employer,
                        "date_candidature_mensuelle",
                        "count",
                        "type_structure",
                        prev_months_filter)

fig_counts_orienteur = multiple_bar_plot(accepted_by_orienteur,
                        "date_candidature_mensuelle",
                        "count",
                        "origine",
                        prev_months_filter)

fig_pie = pie_plot(refus_labels,
                    counts_pct_motif_refus,
                    total_refus,
                    "Motifs de refus des candidatures provenant des orienteurs et prescripteurs")

app.layout = html.Div(children=[
    html.H1(children='''TB116 - Suivi et analyse des candidatures (Recrutement)'''),

    dcc.Dropdown(options=depts,
                 value="all",
                 id="deptsfilter"),

 dcc.Dropdown(options=employer,
              value="all",
              id="employerfilter"),

    html.Div(id="deptsoutput"),

    html.H2(children=
        '''üöÄ Nouveaut√© '''
        ),
    html.Div([
        html.P('''Il est d√©sormais possible de filtrer les r√©sultats √† l'√©chelle locale des EPCI et bassin d'emploi'''),
        html.P('''[enfin, l'impl√©mentation des filtres arrive soon sur cette version Dash üíÉüèΩ ]''')
        ]),

    html.H2(children=
    '''
     ‚òùÔ∏è Rappels
    '''),

    html.Div([
        html.P('''lorsqu'aucune pr√©cision temporelle est apport√©e, les chiffres pr√©sent√©s correspondent aux donn√©es agr√©g√©es par la plateforme de l'inclusion depuis sa cr√©ation (d√©but 2020). Afin de retrouver, par exemple, l'√©tat des candidatures par m√©tier sur les 12 derniers mois, il vous suffit de filtrer sur les 12 derniers mois √† l'aide du filtre "intervalle de dates"'''),
        html.P('''une candidature est l'acte de candidature √† un poste propos√© par un employeur, par un candidat, directement ou avec l‚Äôaide d‚Äôun orienteur ou d‚Äôun prescripteur‚Äã'''),
        html.P('''un candidat est une personne qui postule, directement ou avec l‚Äôaide d‚Äôun orienteur ou d‚Äôun prescripteur, √† un poste aupr√®s d‚Äôun employeur''')
    ]),

    html.H2(children=
    '''
     Indicateurs cl√©s
    ''', style={"align": "center"}),

    html.Div([
        html.P('''Ci dessous vous retrouvez des chiffres cl√©s associ√©s √† ce tableau de bord, calcul√©s √† l'aide des donn√©es obtenues depuis la cr√©ation de la plateforme de l'inclusion. Afin d'affiner votre recherche sur une p√©riode sp√©cifique des filtres (filtre temporel et par intervalles de dates) sont √† votre disposition''')
    ]),

    html.Table(
        [
            html.Tr([
                html.Th(id="nb_total_candidatures",
                        style={"font-size":"160%"}),
                html.Th(id="pct_accepted",
                        style={"font-size":"160%"}),
                html.Th(id="pct_delined",
                        style={"font-size":"160%"})
            ]),
            html.Tr([
                html.Td('''de candidatures √©mises''',
                        style={"textAlign":"center"}),
                html.Td('''de candidatures accept√©es''',
                        style={"textAlign":"center"}),
                html.Td('''de candidatures d√©clin√©es''',
                        style={"textAlign":"center"})
            ])
        ]
        ,
        style={"align": "center",
               "width": "100%"}
    ),

    html.H2(children='''
        1. Comment √©voluent les candidatures re√ßues sur les 12 derniers mois ?
    '''),
    html.Div([
        html.P('''- par √©tat'''),
        html.P('''- par origine''')
    ]),
    html.H3(children='''Evolution des candidatures sur les 12 derniers mois, par √©tat'''),
    dcc.Graph(
        id='fig_counts_√©tat',
        figure=fig_counts_√©tat
    ),
    html.H3(children='''Evolution des candidatures sur les 12 derniers mois, par origine'''),
    dcc.Graph(
        id='fig_counts_origine',
        figure=fig_counts_origine
    ),

    html.H2(children='''
        2. Comment se r√©partissent les candidatures accept√©es sur les 12 derniers mois ?
    '''),
    html.Div([
        html.P('''- par type d'employeur'''),
        html.P('''- par type d'orienteur''')
    ]),
    html.H3(children='''Evolution des candidatures accept√©es sur les 12 derniers mois, par type d'employeur'''),
    dcc.Graph(
        id='fig_counts_employer',
        figure=fig_counts_employer
    ),
    html.H3(children='''Evolution des candidatures accept√©es sur les 12 derniers mois, par type d'orienteur'''),
    dcc.Graph(
        id='fig_counts_orienteur',
        figure=fig_counts_orienteur
    ),

    html.H2(children='''
        3. Quel est le profil des candidats accept√©s sur les 12 derniers mois ?
    '''),
    generate_table(candidate_profile, table_cols),

    html.H2(children='''
        4. Quelle est la part de candidatures accept√©es et refus√©es ?
    '''),
    html.Div([
        html.P('''- par m√©tier'''),
        html.P('''- par domaine professionnel''')
    ]),

    html.H2(children='''
        5. Quel est le taux de candidature accept√© selon le prescripteur ?
    '''),

    html.H2(children='''
        6. Quels sont les motifs de refus des candidatures provenant des prescripteurs et des orienteurs ?
    '''),
    dcc.Graph(
        id='fig_pie',
        figure=fig_pie
    ),
    html.H2(children='''
        7. Quel est le taux de refus par type de structure ?
    ''')

])

# CALLBACKS

# nbcandidatures / deptfilter
@app.callback(
    Output(component_id='nb_total_candidatures', component_property='children'),
    Input(component_id='deptsfilter', component_property='value')
)
def update_nb_candidatures(input_value):
    candidatures_12_prev_months = candidatures_df
    if input_value != "all":
        # r√©cup colonnes d'int√©r√™t
        candidatures_12_prev_months = candidatures_12_prev_months[candidatures_12_prev_months.nom_d√©partement_structure == input_value]
    nbtotalcandidatures = len(candidatures_12_prev_months)
    return nbtotalcandidatures

# pct_accepted / deptfilter
@app.callback(
    Output(component_id='pct_accepted', component_property='children'),
    Input(component_id='deptsfilter', component_property='value')
)
def update_pct_delined(input_value):
    candidatures_12_prev_months = accepted_df
    if input_value != "all":
        # r√©cup colonnes d'int√©r√™t
        candidatures_12_prev_months = candidatures_12_prev_months[candidatures_12_prev_months.nom_d√©partement_structure == input_value]
    nbtotalcandidatures = round(len(candidatures_12_prev_months)/len(candidatures_df)*100)
    return str(nbtotalcandidatures)+" %"

# pct_accepted / deptfilter
@app.callback(
    Output(component_id='pct_delined', component_property='children'),
    Input(component_id='deptsfilter', component_property='value')
)
def update_pct_accepted(input_value):
    candidatures_12_prev_months = declined_df
    if input_value != "all":
        # r√©cup colonnes d'int√©r√™t
        candidatures_12_prev_months = candidatures_12_prev_months[candidatures_12_prev_months.nom_d√©partement_structure == input_value]
    nbtotalcandidatures = round(len(candidatures_12_prev_months)/len(candidatures_df)*100)
    return str(nbtotalcandidatures)+" %"

# tb116-barplot / deptfilter
@app.callback(
    Output(component_id='fig_counts_√©tat', component_property='figure'),
    Input(component_id='deptsfilter', component_property='value'),
    Input(component_id='employerfilter', component_property='value')
)
def update_output_div(deptsfilter, employerfilter):
    newdf = candidatures_12_prev_months
    if deptsfilter != "all":
        # r√©cup colonnes d'int√©r√™t
        newdf = newdf[newdf.nom_d√©partement_structure == deptsfilter]
    if employerfilter != "all":
        # r√©cup colonnes d'int√©r√™t
        newdf = newdf[newdf.type_structure == employerfilter]
    counts_df_√©tat = groupby_count(newdf,
                              ['√©tat', 'date_candidature_mensuelle'],
                              "id_anonymis√©")

    fig = multiple_bar_plot(counts_df_√©tat,
                            "date_candidature_mensuelle",
                            "count",
                            "√©tat",
                            prev_months_filter)
    return fig

# tb116-barplot / deptfilter
@app.callback(
    Output(component_id='fig_counts_origine', component_property='figure'),
    Input(component_id='deptsfilter', component_property='value'),
    Input(component_id='employerfilter', component_property='value')
)
def update_output_div(deptsfilter, employerfilter):
    newdf = candidatures_12_prev_months
    if deptsfilter != "all":
        # r√©cup colonnes d'int√©r√™t
        newdf = newdf[newdf.nom_d√©partement_structure == deptsfilter]

    if employerfilter != "all":
        newdf = newdf[newdf.type_structure == employerfilter]

    counts_df_√©tat = groupby_count(newdf,
                              ['origine', 'date_candidature_mensuelle'],
                              "id_anonymis√©")

    fig = multiple_bar_plot(counts_df_√©tat,
                            "date_candidature_mensuelle",
                            "count",
                            "origine",
                            prev_months_filter)
    return fig

# @app.callback(
#     Output(component_id='tbl_candidate_profile', component_property='data'),
#     Input(component_id='deptsfilter', component_property='value')
# )
# def update_candidates_table_profile(deptsfilter):
#     newdf = candidats_df
#     if deptsfilter != "all":
#         # r√©cup colonnes d'int√©r√™t
#         newdf = newdf[newdf.nom_d√©partement == deptsfilter]
#     dtf, cols = prepare_candidate_profile_per_date(newdf, prev_months_filter)
#     #table = generate_table(dtf, cols)
#     return dtf

app.run_server(debug=True)
